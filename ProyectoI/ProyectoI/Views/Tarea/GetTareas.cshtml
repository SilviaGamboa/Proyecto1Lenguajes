@model List<ProyectoI.Models.TareaModel>

@{
    ViewData["Title"] = "Dashboard de Tareas";
}

<h2>Dashboard de Tareas</h2>
<div id="btnFunciones">
    <!-- Botón para abrir el modal -->
    <button id="btnCrearTarea" onclick="abrirModalCrearTarea()">Crear Tarea</button>
</div>


<!-- Lista de Tareas Pendientes -->
<div class="task-list" id="Pendientes" ondrop="drop(event)" ondragover="allowDrop(event)">
    <h3>Pendientes</h3>
    @foreach (var tarea in Model.Where(t => t.Estado == "Pendientes"))
    {
        <div id="tarea_@tarea.Id" class="task" draggable="true" ondragstart="drag(event)" onclick="verTarea(@tarea.Id)">
            <p>@tarea.Titulo</p>
            <p>@tarea.Descripcion</p>
        </div>
    }
</div>

<!-- Lista de Tareas En Proceso -->
<div class="task-list" id="EnProgreso" ondrop="drop(event)" ondragover="allowDrop(event)">
    <h3>En Proceso</h3>
    @foreach (var tarea in Model.Where(t => t.Estado == "EnProgreso"))
    {
        <div id="tarea_@tarea.Id" class="task" draggable="true" ondragstart="drag(event)" onclick="verTarea(@tarea.Id)">
            <p>@tarea.Titulo</p>
            <p>@tarea.Descripcion</p>
        </div>
    }
</div>

<!-- Lista de Tareas Finalizadas -->
<div class="task-list" id="Finalizado" ondrop="drop(event)" ondragover="allowDrop(event)">
    <h3>Finalizadas</h3>
    @foreach (var tarea in Model.Where(t => t.Estado == "Finalizado"))
    {
        <div id="tarea_@tarea.Id" class="task" draggable="true" ondragstart="drag(event)" onclick="verTarea(@tarea.Id)">
            <p>@tarea.Titulo</p>
            <p>@tarea.Descripcion</p>
        </div>
    }
</div>

<!-- Modal para crear tarea -->
<div id="modalCrearTarea" class="modal">
    <div class="modal-content">
        <span class="close" onclick="closeModalC()">&times;</span>
        <h2>Crear Tarea</h2>
        <form id="formCrearTarea" method="post" action="/Tarea/CrearTarea">
            <div>
                <label for="Titulo">Título</label>
                <input type="text" id="Titulo" name="Titulo" required />
            </div>
            <div>
                <label for="Descripcion">Descripción</label>
                <textarea id="Descripcion" name="Descripcion" required></textarea>
            </div>
            <div>
                <label for="FechaVencimiento">Fecha de Vencimiento</label>
                <input type="date" id="FechaVencimiento" name="FechaVencimiento" required />
            </div>
            <div>
                <label for="Prioridad">Prioridad</label>
                <select id="Prioridad" name="Prioridad" required>
                    <option value="Baja">Baja</option>
                    <option value="Media">Media</option>
                    <option value="Alta">Alta</option>
                </select>
            </div>
            <div class="form-group">
        <label for="Estado">Estado</label>
        <select class="form-control" id="Estado" name="Estado">
            <option value="Pendientes"> Pendientes</option>
            <option value="EnProgreso">EnProgreso</option>
            <option value="Finalizado">Finalizado</option>
        </select>
    </div>
            <input type="hidden" id="UsuarioCreadorId" name="UsuarioCreadorId">
            <button type="submit">Crear Tarea</button>
        </form>
    </div>
</div>




<!-- Modal para mostrar la información de la tarea -->
<div id="modalTarea" class="modal">
    <div class="modal-content">
        <span class="close" onclick="closeModal()">&times;</span>
        <h2>Detalles de la tarea</h2>
        <p><strong>ID:</strong> <span id="modalId"></span></p>
        <p><strong>Título:</strong> <span id="modalTitulo"></span></p>
        <p><strong>Descripción:</strong> <span id="modalDescripcion"></span></p>
        <p><strong>Fecha Vencimiento:</strong> <span id="modalFechaVencimiento"></span></p>
        <p><strong>Prioridad:</strong> <span id="modalPrioridad"></span></p>
        <p><strong>Estado:</strong> <span id="modalEstado"></span></p>
        <p><strong>Creada por:</strong> <span id="modalUsuarioCreador"></span></p>
        <p><strong>Usuario Asignado:</strong> <span id="modalUsuarioAsignado"></span></p>

        <!-- Select para asignar usuario -->
        <label for="selectUsuarios"><strong>Asignar tarea a:</strong></label>
        <select id="selectUsuarios" onchange="asignarUsuarioATarea()">
            <option value="">Seleccione un usuario</option>
        </select>

        <div id="modalFooter" class="modal-footer">
            <button class="btn btn-warning" id="btnEditar">Editar</button>
            
        </div>
    </div>
</div>


<!-- Modal para editar tarea -->
<div id="modalEditarTarea" class="modal">
    <div class="modal-content">
        <span class="close" onclick="closeModalEditar()">&times;</span>
        <h2>Editar Tarea</h2>

        <form id="formEditarTarea" method="post" action="/Tarea/ActualizarTarea">
            <input type="hidden" id="MEtareaid" name="Id" />

            <div class="form-group">
                <label>Título</label>
                <input type="text" id="METitulo" name="Titulo" class="form-control" required />
            </div>

            <div class="form-group">
                <label>Descripción</label>
                <textarea id="MEDescripcion" name="Descripcion" class="form-control" required></textarea>
            </div>

            <div class="form-group">
               
                <p><strong>Fecha Vencimiento:</strong> 
                    <span id="MESFechaVencimiento"></span></p>
                <input type="date" id="MEFechaVencimiento" name="FechaVencimiento" class="form-control" required />
            </div>

            <div class="form-group">
                <label>Prioridad</label>
                <select id="MEPrioridad" name="Prioridad" class="form-control" required>
                    <option value="Alta">Alta</option>
                    <option value="Media">Media</option>
                    <option value="Baja">Baja</option>
                </select>
            </div>

            <div class="form-group">
                <label>Estado</label>
                <select id="MEEstado" name="Estado" class="form-control">
                    <option value="Pendientes">Pendientes</option>
                    <option value="EnProgreso">En Progreso</option>
                    <option value="Finalizado">Finalizado</option>
                </select>
            </div>

            <button type="submit" class="btn btn-primary">Actualizar</button>
            <button type="button" class="btn btn-secondary" onclick="closeModalEditar()">Cancelar</button>
        </form>
    </div>
</div>




<script>

    //-----------------------------------------------------CARGAR BOTONES SEGUN EL USARIO-----------------------------------------------------------------------------
    const esAdmin = sessionStorage.getItem("admin") ; //VARIABLE PARA SABER SI EL USUARIO LOGADO ES ADMIN O NO Y ASI PONER LAS FUNCIONES SEGUN SEA

    document.addEventListener("DOMContentLoaded", function () {
        console.log(esAdmin)
        if (esAdmin) {
            const btnFunciones = document.getElementById("btnFunciones");//div de botones

            const btnGestionUsuarios = document.createElement("button");
            btnGestionUsuarios.textContent = "Crear Usuarios";
            btnGestionUsuarios.className="btn btn-primary"
            btnGestionUsuarios.onclick = function () {
                console.log("Redirige a gestión de usuarios");
                window.location.href = "/Administrator/GestionUsuario";

            };
            const btnInvitacion = document.createElement("button");
            btnInvitacion.textContent = "Envia Invitacion";
            btnInvitacion.className = "btn btn-primary"
            btnInvitacion.onclick = function () {
                console.log("Redirige a gestión de usuarios");
                window.location.href = "/SendMailer/Index";

            };



            btnFunciones.appendChild(btnInvitacion);
            btnFunciones.appendChild(btnGestionUsuarios);
        } else {
            const btnEditarPerfil = document.createElement("button");
            btnEditarPerfil.textContent = "Editar Perfil";
            btnEditarPerfil.className = "btn btn-primary"
            btnEditarPerfil.onclick = function () {
                console.log("Redirige a editar perfil usuario");
                window.location.href = "/Administrator/Perfil";
            };
            btnFunciones.appendChild(btnEditarPerfil);
        }
    });

    //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    //-----------------------------------------------FUNCIONES PARA DRAG AND DROP-----------------------------------------------------------------------------------------------------

    // Permitir el drop de las tareas en las listas
    function allowDrop(ev) {
        ev.preventDefault();
        if (ev.target.classList.contains('task-list')) {
            ev.target.style.border = '2px dashed #000'; // Estilo para la lista donde puede soltar
        }
    }

    // Configuración del drag
    function drag(ev) {
        ev.dataTransfer.setData("text", ev.target.id);
    }

    // Actualizar estado tarea y moverla visualmente
    function drop(ev) {
        ev.preventDefault();
        var data = ev.dataTransfer.getData("text");
        var tareaId = data.split('_')[1]; // Obtener el ID de la tarea desde el elemento
        var nuevaLista = ev.target.closest('.task-list').id;

        // Eliminar borde de la lista al soltar
        ev.target.style.border = '';

        // Mapeo de estados
        var estadoMap = {
            "Pendientes": "Pendientes",
            "EnProgreso": "EnProgreso", 
            "Finalizado": "Finalizado"
        };

        var nuevoEstado = estadoMap[nuevaLista];

        if (nuevoEstado) {
            fetch('/Tarea/CambiarEstado', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    tareaId: parseInt(tareaId),  // Convertir tareaId a entero
                    nuevoEstado: nuevoEstado     
                })
            })
                .then(response => {
                    // Verificar si la respuesta fue exitosa
                    if (!response.ok) {
                        throw new Error('Hubo un error en la respuesta del servidor');
                    }
                    return response.json(); // Procesamos la respuesta como JSON
                })
                .then(data => {
                 
                    const tareaElemento = document.getElementById('tarea_' + data.tareaId);

                    if (tareaElemento) {
                        // Elimina la tarea de su lista actual
                        tareaElemento.remove();

                        // Encuentra la nueva lista a la que se moverá la tarea
                        const nuevaListaElemento = document.getElementById(nuevaLista);

                        // Agrega la tarea a la nueva lista
                        nuevaListaElemento.appendChild(tareaElemento);

                        // Cambiar la clase visual de la tarea según el estado
                        tareaElemento.classList.remove("task-list-Pendientes", "task-list-EnProgreso", "task-list-Finalizado");
                        tareaElemento.classList.add("task-list-" + nuevoEstado);
                    } else {
                        console.error("No se encontró el elemento con ID:", data.tareaId);
                    }
                })
                .catch(err => {
                    console.error(err);
                    //alert('Hubo un error al realizar la solicitud');
                });
        }
    }

    //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    //------------------------------------------------------------------- FUNCIONES PARA CREAR TAREAS----------------------------------------------------------------------------------------------------

    //ANTES DE ENVIAR EL FORMULARIO CON LOS DATOS INGRESADOS AL CONTROLLER, LE AGREGA EL ID DEL USUARIO LOGUEADO

    // Función para abrir el modal de creación de tareas
    function abrirModalCrearTarea() {
        document.getElementById('modalCrearTarea').style.display = 'block';
    }

    //funcion para asignar el id del usuario creador
    document.getElementById("formCrearTarea").onsubmit = function (event) {
        let usuarioCreadorId;

        const admin = sessionStorage.getItem("admin");

        if (admin === "true") {
            usuarioCreadorId = 1;
        } else {
            const userData = sessionStorage.getItem("user");
            if (userData) {
                const user = JSON.parse(userData);
                usuarioCreadorId = user.id;
            } else {
                alert("Error: No se encontró información del usuario.");
                event.preventDefault(); // Detiene el envío del formulario si no hay datos del usuario
                return;
            }
        }

        // Asignar el ID dinámicamente al campo oculto
        document.getElementById("UsuarioCreadorId").value = usuarioCreadorId;
    };
    

    // Función para cerrar el modal
    function closeModalC() {
        document.getElementById('modalCrearTarea').style.display = 'none';
    }

    //-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    //---------------------------------------------------------VER DETALLES DE LA TAREA-------------------------------------------------------------------------------------------------------------

    // Mostrar detalles de la tarea el modal
    async function verTarea(tareaId) {
        try {
            const response = await fetch(`/Tarea/ObtenerTarea?id=${tareaId}`);

            // Verificar si la respuesta es exitosa
            console.log(response)
            if (!response.ok) {
                throw new Error('Hubo un error en la respuesta del servidor');
            }

            const data = await response.json();  // Esperar y obtener los datos JSON

            console.log(data);  // Ver el contenido de los datos en la consola

            // Actualizar el modal con los datos
            document.getElementById('modalId').textContent = data.id;
            document.getElementById('modalTitulo').textContent = data.titulo;
            document.getElementById('modalDescripcion').textContent = data.descripcion;
            document.getElementById('modalFechaVencimiento').textContent = data.fechaVencimiento;
            document.getElementById('modalPrioridad').textContent = data.prioridad;
            document.getElementById('modalEstado').textContent = data.estado;
           
            // Obtener y asignar el nombre del usuario creador
            const usuarioCreadorNombre = await obtenerNombreUsuario(data.usuarioCreadorId);//llama a la funcion que retorna el nombre del usuario por id
            document.getElementById('modalUsuarioCreador').textContent = usuarioCreadorNombre;

            const usuarioAsignadoElement = document.getElementById('modalUsuarioAsignado');

            // Si `usuarioAsignadoId` es un número válido, obtener su nombre, si no, mostrar mensaje
            if (data.usuarioAsignadoId && !isNaN(data.usuarioAsignadoId)) {
                const usuarioAsignadoNombre = await obtenerNombreUsuario(data.usuarioAsignadoId); //llama a la funcion que retorna el nombre del usuario por id
                usuarioAsignadoElement.textContent = usuarioAsignadoNombre;
            } else {
                usuarioAsignadoElement.textContent = "Aún no ha sido asignada a ningún usuario";
            }
            
            // AGREGAR BOTONES 

            // Asegurar que el botón de edición existe antes de asignarle el evento
            const btnEditar = document.getElementById('btnEditar');
            if (btnEditar) {
                btnEditar.onclick = function () {
                    abrirModalEditarTarea(data);
                };
            }

            // Agregar botón de eliminar si el usuario es admin
            if (esAdmin) {
                let btnEliminar = document.getElementById('btnEliminar');

                // Si el botón no existe, lo creamos y lo añadimos al modal
                if (!btnEliminar) {
                    btnEliminar = document.createElement('button');
                    btnEliminar.id = 'btnEliminar';
                    btnEliminar.textContent = 'Eliminar';
                    btnEliminar.className = "btn btn-danger";
                    // Llamar a la función eliminarTarea cuando se haga clic
                    btnEliminar.onclick = function () {
                        eliminarTarea(data.id);
                    };

                    // Agregar el botón al modal
                    document.getElementById('modalFooter').appendChild(btnEliminar);
                }
            }
            cargarUsuariosEnSelect(); // llama a la funcion que xtrae los usuarios de la bd para poder asignar uno a una tarea
            
            // Mostrar el modal
            document.getElementById('modalTarea').style.display = "block";
        } catch (error) {
            console.error('Error al obtener los detalles de la tarea:', error);
            alert('Hubo un error al obtener los detalles de la tarea.');
        }
    }


    //Obtener nombre de usuario por id

    async function obtenerNombreUsuario(id) {
        try {
            const response = await fetch(`/Administrator/GetUserById?id=${id}`);

            if (!response.ok) {
                throw new Error("Usuario no encontrado");
            }

            const user = await response.json();
            return user.nombre; // Ajusta según la estructura de tu modelo
        } catch (error) {
            console.error("Error al obtener el usuario:", error);
            return "Usuario no encontrado"; // Mensaje en caso de error
        }
    }

    // Cerrar el modal editar
    function closeModal() {
        document.getElementById('modalTarea').style.display = "none";
    }

    //---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


    //-----------------------------------------------------------------FFUNSION ELIMINAR TAREA SOLO PARA ADMINS------------------------------------------------------------------------------------------------------------------------

    //Funcion Eliminar Tarea
    async function eliminarTarea(tareaId) {
        if (confirm('¿Estás seguro de que deseas eliminar esta tarea?')) {
            try {
                const response = await fetch(`/Tarea/EliminarTarea`, {
                    method: 'POST',  
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: `id=${tareaId}`
                });

                if (!response.ok) {
                    throw new Error('No se pudo eliminar la tarea');
                }

                alert('Tarea eliminada con éxito');
                document.getElementById('modalTarea').style.display = "none";
                location.reload(); // Recargar la página para actualizar la lista de tareas
            } catch (error) {
                console.error('Error al eliminar la tarea:', error);
                alert('Hubo un error al eliminar la tarea.');
            }
        }
    }

    //-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    //--------------------------------------------------------------FUNCIONES PARA OPTENER USUARIOS Y CARGARLOS AL SELECT DE ASIGNAR USUARIOS Y ASIGNAR TAREA A USUARIO---------------------------------------------------------------------------------------------

    //funcion obtener usuarios
        async function obtenerUsuarios() {
        try {
            const response = await fetch('/Administrator/GetUsers'); // Asegúrate de que la ruta sea correcta

            if (!response.ok) {
                throw new Error('Error al obtener la lista de usuarios');
            }

            const usuarios = await response.json();
            console.log(usuarios);
            return usuarios;
        } catch (error) {
            console.error('Error:', error);
            return [];
        }
    }

    async function cargarUsuariosEnSelect() {
        const usuarios = await obtenerUsuarios();
        const selectUsuarios = document.getElementById('selectUsuarios');

        // Limpiar opciones previas
        selectUsuarios.innerHTML = '<option value="">Seleccione un usuario</option>';

        // Agregar cada usuario como opción
        usuarios.slice(1).forEach(user => {
            const option = document.createElement('option');
            option.value = user.id;  // Ajusta según la estructura de UserModel
            option.textContent = user.nombre;  // Ajusta según tu modelo
            selectUsuarios.appendChild(option);
        });
    }

    
    //Funcion asignar usuario a tarea
    async function asignarUsuarioATarea() {
        const selectUsuarios = document.getElementById('selectUsuarios');
        const usuarioId = selectUsuarios.value;
        const tareaId = document.getElementById('modalId').textContent;

        if (!usuarioId || !tareaId) {
            console.error("Debe seleccionar un usuario y asegurarse de que la tarea tenga un ID válido.");
            return;
        }

        console.log("Enviando:", { tareaId, usuarioId });

        try {
            const response = await fetch(`/Tarea/AsignarUsuario?tareaId=${tareaId}&usuarioId=${usuarioId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                }
            });

            if (!response.ok) {
                throw new Error('Error al asignar usuario a la tarea');
            }

            console.log(`Usuario ${usuarioId} asignado a la tarea ${tareaId} correctamente`);
            alert("Usuario asignado correctamente a la tarea.");
            location.reload();

        } catch (error) {
            console.error('Error:', error);
            alert("No se pudo asignar el usuario a la tarea.");
        }
    }

    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    //---------------------------------------------------------------FUNCIONES PARA ABRIR EL MODAL DE EDITAR TAREA Y ACTUALIZAR TAREA-------------------------------------------------------------------------------------------------------------------------------------------------

    // Función para abrir el modal de editar tarea y cargar los datos
    function abrirModalEditarTarea(tarea) {
        if (!tarea) {
            console.error("No se recibió la tarea para editar.");
            return;
        }

        // Rellenar el formulario del modal de edición con los datos de la tarea
        document.getElementById('MEtareaid').value = tarea.id;
        console.log(tarea.fechaVencimiento)
        document.getElementById('METitulo').value = tarea.titulo;
        document.getElementById('MEDescripcion').value = tarea.descripcion;
        document.getElementById('MEFechaVencimiento').value = tarea.fechaVencimiento;
        document.getElementById('MESFechaVencimiento').textContent = tarea.fechaVencimiento;
        document.getElementById('MEPrioridad').value = tarea.prioridad;
        document.getElementById('MEEstado').value = tarea.estado;

        // Cerrar el modal de detalles y abrir el modal de edición
        closeModal();
        document.getElementById('modalEditarTarea').style.display = 'block';
    }

    //Ccerrar modal editar
     function closeModalEditar() {
            document.getElementById('modalEditarTarea').style.display = "none";
        }
    //----------------------------------------------------------------------------------------------------------------------------------------------------------------------------



   
   
   


</script>

<style>
    /* Estilos para el dashboard */
    .task-list {
        border: 2px solid #ccc;
        padding: 10px;
        width: 30%;
        min-height: 300px;
        float: left;
        margin: 10px;
        background-color: #f9f9f9;
        border-radius: 5px;
    }

    /* Estilos para las tareas */
    .task {
        background-color: #fff;
        padding: 10px;
        margin: 5px;
        border-radius: 3px;
        cursor: move;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }

    /* Estilos del modal */
    .modal {
        display: none; /* Escondido por defecto */
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.4); /* Fondo oscuro */
        padding-top: 60px;
    }

    .modal-content {
        background-color: #fefefe;
        margin: 5% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
        max-width: 500px;
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

    form {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    input, textarea, select {
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    button {
        padding: 10px 20px;
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

        button:hover {
            background-color: #45a049;
        }

   

</style>
